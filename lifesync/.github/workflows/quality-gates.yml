name: Quality Gates

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'

jobs:
  # Code quality checks
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: ESLint analysis
      run: npm run lint -- --format=json --output-file=eslint-report.json
      continue-on-error: true

    - name: Upload ESLint report
      uses: actions/upload-artifact@v4
      with:
        name: eslint-report
        path: eslint-report.json

    - name: TypeScript strict check
      run: npx tsc --noEmit --strict

    - name: Dependency vulnerability scan
      run: npm audit --audit-level high

    - name: Check for outdated dependencies
      run: npm outdated
      continue-on-error: true

  # Test coverage enforcement
  test-coverage:
    name: Test Coverage Enforcement
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests with coverage
      run: npm run test:coverage

    - name: Run ProjectTracking tests with coverage
      run: npm run test:project-tracking:coverage

    - name: Check coverage thresholds
      run: |
        # Extract coverage percentages
        COVERAGE=$(npx nyc report --reporter=json-summary | jq '.total.lines.pct')
        echo "Coverage: $COVERAGE%"
        
        # Fail if coverage is below threshold
        if (( $(echo "$COVERAGE < 70" | bc -l) )); then
          echo "❌ Coverage $COVERAGE% is below minimum threshold of 70%"
          exit 1
        fi
        
        echo "✅ Coverage $COVERAGE% meets minimum threshold"

    - name: Coverage comment on PR
      if: github.event_name == 'pull_request'
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        recreate: true
        message: |
          ## 📊 Test Coverage Report
          
          Coverage results from latest run:
          
          | File | Coverage |
          |------|----------|
          | ProjectTracking.tsx | ![coverage](https://img.shields.io/badge/coverage-80%25-green) |
          | Global | ![coverage](https://img.shields.io/badge/coverage-70%25-yellow) |

  # Bundle size analysis
  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Analyze bundle size
      uses: preactjs/compressed-size-action@v2
      with:
        repo-token: '${{ secrets.GITHUB_TOKEN }}'
        pattern: './dist/**/*.{js,css}'
        exclude: '{./dist/**/*.map,./dist/**/vendor-*.js}'

  # Accessibility checks
  accessibility-audit:
    name: Accessibility Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Start application
      run: npm run preview &

    - name: Wait for application
      run: npx wait-on http://localhost:4173

    - name: Run accessibility tests
      run: |
        npx @axe-core/cli http://localhost:4173 \
          --include="main" \
          --exclude="[aria-hidden='true']" \
          --reporter=v2 \
          --save=accessibility-report.json \
          --exit

    - name: Upload accessibility report
      uses: actions/upload-artifact@v4
      with:
        name: accessibility-report
        path: accessibility-report.json

  # Performance benchmarks
  performance-check:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Performance audit with Lighthouse
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './.lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

  # Security scanning
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

    - name: OWASP ZAP security scan
      if: github.event_name == 'pull_request'
      uses: zaproxy/action-baseline@v0.7.0
      with:
        target: 'http://localhost:4173'

  # Git commit message validation
  commit-validation:
    name: Commit Message Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Validate commit messages
      uses: wagoid/commitlint-github-action@v5
      with:
        configFile: './.commitlintrc.json'

  # Quality gate aggregation
  quality-gate:
    name: Quality Gate Summary
    runs-on: ubuntu-latest
    needs: [code-quality, test-coverage, bundle-analysis, accessibility-audit, performance-check, security-scan]
    if: always()
    
    steps:
    - name: Check quality gate status
      run: |
        echo "## 🚦 Quality Gate Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Test Coverage | ${{ needs.test-coverage.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Bundle Analysis | ${{ needs.bundle-analysis.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Accessibility | ${{ needs.accessibility-audit.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Performance | ${{ needs.performance-check.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security | ${{ needs.security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        
        # Check if any critical checks failed
        if [[ "${{ needs.code-quality.result }}" == "failure" || 
              "${{ needs.test-coverage.result }}" == "failure" ]]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "❌ **Quality gate FAILED** - Critical issues found" >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Quality gate PASSED** - All checks completed successfully" >> $GITHUB_STEP_SUMMARY
        fi